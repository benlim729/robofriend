{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","prop","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","props","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCJSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACI,4BAAKC,GACL,2BAAIC,MCSLI,MAdf,YAA6B,IAAVC,EAAS,EAATA,OACjB,OACE,6BACCA,EAAOC,KAAI,SAACC,EAAOC,GACjB,OAAO,kBAAC,EAAD,CACPC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCMTU,MAff,YAAoC,IAAhBC,EAAe,EAAfA,aAClB,OACE,kBAAC,WAAD,KACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,O,MCELI,MAVf,SAAgBC,GACd,OACE,yBACEC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEhEJ,EAAKK,WCeGC,E,kDAnBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAU,GAHA,E,8DAOIC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,qFAEFG,KAAKE,MAAMR,a,GAhBKS,aCiDZC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAf1C,EAAKb,MAAQ,CACXlB,OAAQ,GACR6B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKb,SAAS,CAAEvB,OAAQoC,S,+BAQpB,IAAD,EACyBd,KAAKJ,MAA7BlB,EADD,EACCA,OAAQ6B,EADT,EACSA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAACpC,GACpC,OAAOA,EAAMR,KAAK6C,cAAcC,SAASX,EAAYU,kBAEvD,OAAsB,IAAlBvC,EAAOyC,OACF,uCAGL,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQqC,W,GAnCdZ,aCAlBiB,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.8cefd280.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction CardList({robots}) {\r\n  return (\r\n    <div>\r\n    {robots.map((robot, i) => {\r\n       return <Card \r\n       key={robots[i].id} \r\n       id={robots[i].id} \r\n       name={robots[i].name} \r\n       email={robots[i].email} />\r\n    })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React, { Fragment } from \"react\";\r\n\r\nfunction SearchBox({searchChange}) {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"Search Robots\"\r\n          onChange={searchChange}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nfunction Scroll(prop) {\r\n  return (\r\n    <div\r\n      style={{ overflowY: \"scroll\", border: \"3px solid black\", height: \"500px\" }}\r\n    >\r\n      {prop.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Some errors happen. Please contact your administrator</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    if (robots.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">Robot Friends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\n\nReactDOM.render(\n<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}